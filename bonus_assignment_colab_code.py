# Bonus Assignment - Google Colab Code
# Vaishnavi Gopi | [Enter Student ID]

# ===============================
# Question 1: QA with Transformers
# ===============================

!pip install transformers torch --quiet

from transformers import pipeline

# 1. Basic Pipeline Setup
qa_pipeline = pipeline("question-answering")

context1 = "Charles Babbage is known as the father of the computer. He invented the Analytical Engine."
question1 = "Who is known as the father of the computer?"

result1 = qa_pipeline(question=question1, context=context1)
print("Default Model Output:", result1)

# 2. Custom Pretrained Model: deepset/roberta-base-squad2
qa_pipeline_custom = pipeline("question-answering", model="deepset/roberta-base-squad2")

result2 = qa_pipeline_custom(question=question1, context=context1)
print("Custom Model Output:", result2)

# 3. Own Example
context2 = "Python is a powerful programming language. It is widely used in AI and data science."
question2a = "What is Python?"
question2b = "Where is Python commonly used?"

print("Q1:", qa_pipeline_custom(question=question2a, context=context2))
print("Q2:", qa_pipeline_custom(question=question2b, context=context2))

# ===============================
# Question 2: cGAN for MNIST Digits
# ===============================

import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms
from torchvision.utils import make_grid
import matplotlib.pyplot as plt

# Device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Hyperparameters
latent_dim = 100
label_dim = 10
img_shape = (1, 28, 28)
batch_size = 64
epochs = 1  # Increase for better results

# DataLoader
transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize([0.5], [0.5])])
train_loader = torch.utils.data.DataLoader(
    torchvision.datasets.MNIST(root='./data', train=True, transform=transform, download=True),
    batch_size=batch_size, shuffle=True
)

# Generator
class Generator(nn.Module):
    def __init__(self):
        super().__init__()
        self.label_emb = nn.Embedding(10, 10)
        self.model = nn.Sequential(
            nn.Linear(latent_dim + 10, 128),
            nn.ReLU(),
            nn.Linear(128, 784),
            nn.Tanh()
        )

    def forward(self, noise, labels):
        label_input = self.label_emb(labels)
        x = torch.cat((noise, label_input), dim=1)
        img = self.model(x)
        return img.view(img.size(0), *img_shape)

# Discriminator
class Discriminator(nn.Module):
    def __init__(self):
        super().__init__()
        self.label_emb = nn.Embedding(10, 10)
        self.model = nn.Sequential(
            nn.Linear(784 + 10, 128),
            nn.LeakyReLU(0.2),
            nn.Linear(128, 1),
            nn.Sigmoid()
        )

    def forward(self, img, labels):
        label_input = self.label_emb(labels)
        x = torch.cat((img.view(img.size(0), -1), label_input), dim=1)
        return self.model(x)

# Models
generator = Generator().to(device)
discriminator = Discriminator().to(device)

# Loss and Optimizer
loss_fn = nn.BCELoss()
optimizer_G = torch.optim.Adam(generator.parameters(), lr=0.0002)
optimizer_D = torch.optim.Adam(discriminator.parameters(), lr=0.0002)

# Training Loop
for epoch in range(epochs):
    for imgs, labels in train_loader:
        batch_size = imgs.size(0)
        real = torch.ones(batch_size, 1).to(device)
        fake = torch.zeros(batch_size, 1).to(device)

        imgs, labels = imgs.to(device), labels.to(device)
        z = torch.randn(batch_size, latent_dim).to(device)
        gen_imgs = generator(z, labels)

        # Discriminator
        optimizer_D.zero_grad()
        real_loss = loss_fn(discriminator(imgs, labels), real)
        fake_loss = loss_fn(discriminator(gen_imgs.detach(), labels), fake)
        d_loss = real_loss + fake_loss
        d_loss.backward()
        optimizer_D.step()

        # Generator
        optimizer_G.zero_grad()
        g_loss = loss_fn(discriminator(gen_imgs, labels), real)
        g_loss.backward()
        optimizer_G.step()

    print(f"Epoch [{epoch+1}/{epochs}] - D Loss: {d_loss.item():.4f}, G Loss: {g_loss.item():.4f}")

# Generate a row of digits 0-9
z = torch.randn(10, latent_dim).to(device)
labels = torch.arange(0, 10).to(device)
gen_imgs = generator(z, labels).detach().cpu()

# Visualize
grid = make_grid(gen_imgs, nrow=10, normalize=True)
plt.figure(figsize=(15, 2))
plt.imshow(grid.permute(1, 2, 0).squeeze())
plt.axis("off")
plt.title("Digits 0 to 9 Generated by cGAN")
plt.show()
